# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from bosdyn.api import payload_software_update_pb2 as bosdyn_dot_api_dot_payload__software__update__pb2


class PayloadSoftwareUpdateServiceStub(object):
    """The PayloadSoftwareUpdateService is hosted by a robot and coordinates software updates of the
    various payloads attached to the robot.  Each payload connects to this service to communicate
    its current version, obtain information about available updates, and provide status of the
    update process.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendCurrentVersionInfo = channel.unary_unary(
                '/bosdyn.api.PayloadSoftwareUpdateService/SendCurrentVersionInfo',
                request_serializer=bosdyn_dot_api_dot_payload__software__update__pb2.SendCurrentVersionInfoRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_payload__software__update__pb2.SendCurrentVersionInfoResponse.FromString,
                )
        self.GetAvailableSoftwareUpdates = channel.unary_unary(
                '/bosdyn.api.PayloadSoftwareUpdateService/GetAvailableSoftwareUpdates',
                request_serializer=bosdyn_dot_api_dot_payload__software__update__pb2.GetAvailableSoftwareUpdatesRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_payload__software__update__pb2.GetAvailableSoftwareUpdatesResponse.FromString,
                )
        self.SendSoftwareUpdateStatus = channel.unary_unary(
                '/bosdyn.api.PayloadSoftwareUpdateService/SendSoftwareUpdateStatus',
                request_serializer=bosdyn_dot_api_dot_payload__software__update__pb2.SendSoftwareUpdateStatusRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_payload__software__update__pb2.SendSoftwareUpdateStatusResponse.FromString,
                )


class PayloadSoftwareUpdateServiceServicer(object):
    """The PayloadSoftwareUpdateService is hosted by a robot and coordinates software updates of the
    various payloads attached to the robot.  Each payload connects to this service to communicate
    its current version, obtain information about available updates, and provide status of the
    update process.
    """

    def SendCurrentVersionInfo(self, request, context):
        """Send the payload's current software version information to the service.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAvailableSoftwareUpdates(self, request, context):
        """Query the payload software update service for available software updates for the payload
        and any updateable components hosted by the payload.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendSoftwareUpdateStatus(self, request, context):
        """Set the status of the payload software update in process.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PayloadSoftwareUpdateServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendCurrentVersionInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.SendCurrentVersionInfo,
                    request_deserializer=bosdyn_dot_api_dot_payload__software__update__pb2.SendCurrentVersionInfoRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_payload__software__update__pb2.SendCurrentVersionInfoResponse.SerializeToString,
            ),
            'GetAvailableSoftwareUpdates': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAvailableSoftwareUpdates,
                    request_deserializer=bosdyn_dot_api_dot_payload__software__update__pb2.GetAvailableSoftwareUpdatesRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_payload__software__update__pb2.GetAvailableSoftwareUpdatesResponse.SerializeToString,
            ),
            'SendSoftwareUpdateStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.SendSoftwareUpdateStatus,
                    request_deserializer=bosdyn_dot_api_dot_payload__software__update__pb2.SendSoftwareUpdateStatusRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_payload__software__update__pb2.SendSoftwareUpdateStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bosdyn.api.PayloadSoftwareUpdateService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PayloadSoftwareUpdateService(object):
    """The PayloadSoftwareUpdateService is hosted by a robot and coordinates software updates of the
    various payloads attached to the robot.  Each payload connects to this service to communicate
    its current version, obtain information about available updates, and provide status of the
    update process.
    """

    @staticmethod
    def SendCurrentVersionInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.PayloadSoftwareUpdateService/SendCurrentVersionInfo',
            bosdyn_dot_api_dot_payload__software__update__pb2.SendCurrentVersionInfoRequest.SerializeToString,
            bosdyn_dot_api_dot_payload__software__update__pb2.SendCurrentVersionInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAvailableSoftwareUpdates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.PayloadSoftwareUpdateService/GetAvailableSoftwareUpdates',
            bosdyn_dot_api_dot_payload__software__update__pb2.GetAvailableSoftwareUpdatesRequest.SerializeToString,
            bosdyn_dot_api_dot_payload__software__update__pb2.GetAvailableSoftwareUpdatesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendSoftwareUpdateStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.PayloadSoftwareUpdateService/SendSoftwareUpdateStatus',
            bosdyn_dot_api_dot_payload__software__update__pb2.SendSoftwareUpdateStatusRequest.SerializeToString,
            bosdyn_dot_api_dot_payload__software__update__pb2.SendSoftwareUpdateStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
